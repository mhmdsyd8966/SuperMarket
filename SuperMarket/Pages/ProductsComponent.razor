@page "/products"
@attribute [Authorize(policy: "AdminOnly")]

@inject NavigationManager NavigationManager
@inject IViewProductUseCase ViewProductUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject IDeleteProductUseCase DeleteProductUseCase
<h3>Products</h3>
<br />
@if(products!=null){
	<table class="table">
		<thead>
			<tr>
				<th>Product Category</th>
				<th>Product Name</th>
				<th>Price</th>
				<th>Quantity</th>
				<th></th>
			</tr>

		</thead>
		<tbody>
			@foreach(var product in products){
				<tr>
					<td>@GetCategoryByIdUseCase.Execute(product.CategoryId)?.Name</td>
					<td>@product.Name</td>
					<td>@(Math.Round(product.Price,2))</td>
					<td>@product.Quantity</td>
					<td>
						<button type="button" class="btn btn-primary" @onclick="@(()=>OnEditProduct(product))">Edit</button>
						<button type="button" class="btn btn-danger" @onclick="@(()=>OnDeleteProduct(product.ProductId))">Delete</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}
<br />
<button type="button" @onclick="OnClickAddProduct" class="btn btn-primary">Add Product</button>

@code {
	private IEnumerable<Product> products;
	protected override void OnInitialized(){
		base.OnInitialized();
		products = ViewProductUseCase.Execute();
	}
	private void OnClickAddProduct()
	{
		NavigationManager.NavigateTo("/addProduct");
	}
	private void OnEditProduct(Product product)
	{
		NavigationManager.NavigateTo($"/updateProduct/{product.ProductId}");
	}
	private void OnDeleteProduct(int productId)
	{
		DeleteProductUseCase.Execute(productId);
	}
}
