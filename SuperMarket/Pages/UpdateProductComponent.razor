@page "/updateProduct/{productId}"
@attribute [Authorize(policy: "AdminOnly")]

@inject NavigationManager NavigationManger
@inject IAddProductUseCase AddProductUseCase
@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject IUpdateProductUseCase UpdateProductUseCase
@inject IViewCategoriesUseCase ViewCategoriesUseCase
<h3>UpdateProductComponent</h3>
<br />
<EditForm Model="product" OnValidSubmit="OnValidSumit">
	<DataAnnotationsValidator></DataAnnotationsValidator>
	<ValidationSummary></ValidationSummary>
	<div class="form-group">
		<label for="name">Name</label>
		<InputText id="name" @bind-Value="product.Name" class="form-control"></InputText>
	</div>
	<div class="form-group">
		<label for="category">category</label>
		<select @bind="product.CategoryId" class="form-select">
			<option selected></option>
			@foreach (var cat in categories)
			{
				<option value="@cat.CategoryId">@cat.Name</option>
			}
		</select>
	</div>
	<div class="form-group">
		<label for="price">Price</label>
		<InputNumber id="price" @bind-Value="product.Price" class="form-control" @bind-Value:format="F2"></InputNumber>
	</div>
	<div class="form-group">
		<label for="Quantity">Quantity</label>
		<InputNumber id="Quantity" @bind-Value="product.Quantity" class="form-control"></InputNumber>
	</div>
	<br />
	<button type="submit" class="btn btn-primary">Save</button>
	<button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
</EditForm>

@code {
	[Parameter]
	public string productId { get; set; }
	private Product product;
	private IEnumerable<Category> categories;
	protected override void OnInitialized()
	{
		base.OnInitialized();
		categories = ViewCategoriesUseCase.Execute();
	}
	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		if (int.TryParse(this.productId, out int iProductId))
		{
			var prod = GetProductByIdUseCase.Execute(iProductId);
			this.product = new Product
				{
					ProductId = prod.ProductId,
					Name = prod.Name,
					CategoryId = prod.CategoryId,
					Price = prod.Price,
					Quantity = prod.Quantity
				};
		}

	}
	private void OnValidSumit()
	{
		UpdateProductUseCase.Execute(product);
		NavigationManger.NavigateTo("/products");

	}
	private void OnCancel()
	{
		NavigationManger.NavigateTo("/products");
	}
}
